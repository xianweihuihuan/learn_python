#变量及print
print("hello world")
print(1 + 2)
print(2 / 3)
print( (67.5 + 89.0 + 12.9 + 32.2) / 4 )
avg = (67.5 + 89.0 + 12.9 + 32.2) / 4
total = (67.5 - avg) ** 2 + (89.0 - avg) ** 2 + (12.9 - avg) ** 2 + (32.2 - avg)** 2
# ** 表示乘方运算
result = total / 3
print(result)
#类型
a = 10
print(type(a))
b = 0.5
print(type(b))
c = 'hello'
print(type(c))
print(len(c))
aa = 'hello'
bb = ' world'
print(aa+bb)
aaa = True
print(type(aaa))
#变量动态变化
op = 1
print(type(op))
op = 'love'
print(type(op))
#注释 #相当于 //
"""
相当于/**/
与'''等价
"""
'''
这也是一种注释方式
'''
"""
注释的规范
1. 内容准确: 注释内容要和代码一致, 匹配, 并在代码修改时及时更新.
2. 篇幅合理: 注释既不应该太精简, 也不应该长篇大论.
3. 使用中文: 一般中国公司都要求使用中文写注释, 外企另当别论.
4. 积极向上: 注释中不要包含负能量(例如 领导 SB 等).
"""
num = 10
print(f'num = {num}')
'''
使用 f 作为前缀的字符串, 称为 f-string
里面可以使用 { } 来内嵌一个其他的变量/表达式.
'''
num = 0
num = input('请输入一个数')
print(f"你输入的数是{num}")
"""
input 的参数相当于一个 "提示信息", 也可以没有.
input 的返回值就是用户输入的内容. 是字符串类型.
"""
a = input('请输入第一个整数')
b = input('请输入第二个整数')
print(f'a + b = {a + b}')
'''
此处的结果是字符串拼接, 不是算术运算. 如果要想进行算术运算, 需要先转换类型.
'''
a = int(a)
b = int(b)
print(f'a + b = {a + b}')
''''
通过 int( ) 把变量转成了 int 类型.
类似的, 使用 float( ), bool( ), str( ) 等可以完成对应的类型转换.
'''
"""
// 是取整除法(也叫地板除). 整数除以整数, 结果还是整数(舍弃小数部分, 并向下取整. 不是四舍五
"""
print(7 // 2)
'''
直接使用 == 或者 != 即可对字符串内容判定相等. (这一点和 C / Java 不同).
字符串比较大小, 规则是 "字典序"
关于字典序:
想象一个英文词典, 上面的单词都是按照字母顺序排列. 如果首个字母相同, 就比较第二个字母. (就
比如著名单词 abandon).
我们认为一个单词在词典上越靠前, 就越小. 越靠后, 就越大.
'''
a = 0.1 + 0.2
b = 0.3
print(-0.000001 < (a - b) < 0.000001)
"""
像 and or not 这一系列的运算符称为 逻辑运算符.
and == &&
or == ||
not == !
python与其他语言一致，也存在短路机制
"""
"""
python不支持++，--
"""
"""
if 后面的条件表达式, 没有 ( ), 使用 : 作为结尾.
if / else 命中条件后要执行的 "语句块", 使用 缩进 (通常是 4 个空格或者 1 个 tab)来表示, 而不是 { }
对于多条件分支, 不是写作 else if, 而是 elif (合体了).
"""
"""
在 Python 中使用缩进表示代码块. 不同级别的缩进, 程序的执行效果是不同的.
pass 表示 空语句, 并不会对程序的执行有任何影响, 只是占个位置, 保持 Python 语法格式符合要
"""
a = 1
ret = 0
while a <= 5:
    i = 1
    add = 1
    while i<= a:
        add *= i
        i += 1
    ret += add
    a += 1
print(f'1！+2！+3！+4!+5! = {ret}')
"""
for 循环变量 in 可迭代对象:
    循环体
"""
for i in range(1, 11):
    print(i)
"""
使用 range 函数, 能够生成一个可迭代对象. 生成的范围是 [1, 11), 也就是 [1, 10]
通过 range 的第三个参数, 可以指定迭代时候的 "步长". 也就是一次让循环变量加几.
range 的 步长 也可以设定成负数.
continue与break的含义与c++一致
"""
for i in range(0, 13, 2):
    print(f'i = {i}')
"""
random.randint(1, 6) 生成一个 [1, 6]的随机整数
"""
"""
def 函数名(形参列表):
    函数体
    return 返回值

函数必须先定义，在使用
和 C++ / Java 不同, Python 是动态类型的编程语言, 函数的形参不必指定参数类型. 
一个函数是可以一次返回多个返回值的. 使用 , 来分割多个返回值.
如果只想关注其中的部分返回值, 可以使用 _ 来忽略不想要的返回值.
"""
def test():
    x = 10
    y = 20
    return x,y

a,b = test()
print(f'a = {a},b = { b}')
_,c = test()
print(f'c = {c}')
""""
如果函数内部尝试访问的变量在局部不存在, 就会尝试去全局作用域中查找
如果是想在函数内部, 修改全局变量的值, 需要使用 global
"""
x = 10
def tet(t):
    t += 1
    print(f't = {t}')
tet(x)
print(f'x = {x}')
"""
Python 中的函数, 可以给形参指定默认值.
带有默认值的参数, 可以在调用的时候不传参.
带有默认值的参数需要放到没有默认值的参数后面
"""
""""
在调用函数的时候, 需要给函数指定实参. 一般默认情况下是按照形参的顺序, 来依次传递实参的.
但是我们也可以通过 关键字参数, 来调整这里的传参顺序, 显式指定当前实参传递给哪个形参.
"""
def test(x, y):
    print(f'x = {x}')
    print(f'y = {y}')
test(x=10, y=20)
test(y=100, x=200)
"""
创建列表主要有两种方式. [ ]表示一个空列表
list()
如果需要往里面设置初始值, 可以直接写在 [ ] 当中
列表中存放的元素允许是不同的类型. (这一点和 C++ Java 差别较大).
可以通过下标访问操作符 [ ] 来获取到列表中的任意元素.——数组下标
下标可以取负数，表示到数第几个元素
"""
alist = [1,2,3,4]
print(alist)
""""
通过下标操作是一次取出里面第一个元素.
通过切片, 则是一次取出一组连续的元素, 相当于得到一个 子列表
使用 [ : ] 的方式进行切片操作.
alist[1:3] 中的 1:3 表示的是 [1, 3) 这样的由下标构成的前闭后开区间.
也就是从下标为 1 的元素开始(2), 到下标为 3 的元素结束(4), 但是不包含下标为 3 的元素.
所以最终结果只有 2, 3
切片操作中可以省略前后边界
切片操作还可以指定 "步长" , 也就是 "每访问一个元素后, 下标自增几步"
切片操作指定的步长还可以是负数, 此时是从后往前进行取元素. 表示 "每访问一个元素之后, 下标自减几步"
如果切片中填写的数字越界了, 不会有负面效果. 只会尽可能的把满足条件的元素过去到.
"""
print(alist[1:3])
alist = [1,2,3,4,5,6,7,8,9,10,11,12]
print(alist[0:-5:2])

for i in alist:
    print(i) #范围for？？？

for i in range(0,len(alist)):
    print(alist[i])

'''
使用 append 方法, 向列表末尾插入一个元素(尾插).
使用 insert 方法, 向任意位置插入一个元素
nsert 第一个参数表示要插入元素的下标
'''
""""
使用 in 操作符, 判定元素是否在列表中存在. 返回值是布尔类型.
使用 index 方法, 查找元素在列表中的下标. 返回值是一个整数. 如果元素不存在, 则会抛出异常.
"""
print(2 in alist)
print (alist.index(2))
"""
方法：依附于对象的函数 —— 成员函数？
"""
"""
使用 pop 方法删除最末尾元素
pop 也能按照下标来删除元素 —— 缺省值
使用 remove 方法, 按照值删除
"""
print(alist)
alist.pop()
print(alist)
alist.pop(0)
print(alist)
alist.remove(5)
print(alist)
"""
使用 + 能够把两个列表拼接在一起.
此处的 + 结果会生成一个新的列表. 而不会影响到旧列表的内容.
"""
ppp = [1,1,1,1,1,1,]
print(ppp + alist)
"""
使用 extend 方法, 相当于把一个列表拼接到另一个列表的后面.
a.extend(b) , 是把 b 中的内容拼接到 a 的末尾. 不会修改 b, 但是会修改 a.
"""
"""
元组的功能和列表相比, 基本是一致的
元组使用 ( ) 来表示.
元组不能修改里面的元素
"""
"""
另外, 元组在 Python 中很多时候是默认的集合类型. 例如, 当一个函数返回多个值的时候
此处的 result 的类型, 其实是元组.
tuple()
"""
def getPoint():
    return 10, 20
result = getPoint()
print(type(result))
a = { }
b = dict()
print(type(a))
print(type(b))
"""
字典 —— map ？
字典是一种存储 键值对 的结构. —— key 和 value 
dict()
也可以在创建的同时指定初始值
键值对之间使用 , 分割, 键和值之间使用 : 分割. (冒号后面推荐加一个空格).
使用 print 来打印字典内容
为了代码更规范美观, 在创建字典的时候往往会把多个键值对, 分成多行来书写.
student = {
    'id': 1,
    'name': 'zhangsan',
}
最后一个键值对, 后面可以写 , 也可以不写.
使用 in 可以判定 key 是否在字典中，返回bool值
如果 key 在字典中不存在, 则会抛出异常.
使用 [ ] 可以根据 key 来新增/修改value
如果 key 不存在, 对取下标操作赋值，则会型增键值对
使用 pop 方法根据 key 删除对应的键值对.
使用 keys 方法可以获取到字典中的所有的 key
使用 values 方法可以获取到字典中的所有 value
"""
student = { 'id': 1, 'name': 'zhangsan' }
print(student)
student = {
    'id': 1,
    'name': 'zhangsan',
}
print('id' in student)
print(student.keys())
print(student.values())
"""
使用内建函数 open 打开一个文件.
第一个参数是一个字符串, 表示要打开的文件路径
第二个参数是一个字符串, 表示打开方式. 其中 r 表示按照读方式打开. w 表示按照写方式打开. a
表示追加写方式打开.
如果打开文件成功, 返回一个文件对象. 后续的读写文件操作都是围绕这个文件对象展开.
如果打开文件失败(比如路径指定的文件不存在), 就会抛出异常.
使用 close 方法关闭已经打开的文件.
"""
f = open('./1.txt','r')
""""
write写文件
若是以读方式打开，会抛异常
read 读文件并返回字符串
"""
"""
计算机表示中文的时候, 会采取一定的编码方式，称为字符集
要表的汉字，需要一张更大的码表——UTF8

"""
""""
打开文件之后, 是容易忘记关闭的. Python 提供了 上下文管理器 , 来帮助程序猿自动关闭文件.
使用 with 语句打开文件.
with 内部的代码块执行完毕后, 就会自动调用关闭方法
"""
"""
使用 import 可以导入标准库的一个 模块
"""
import datetime

data1 = datetime.datetime(2006,1,27)
data2 = datetime.datetime(2025,2,26)
print(data2 - data1)